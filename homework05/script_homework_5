Script started on 2023-12-05 00:16:54-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="21"]
]0;pjf5@remotel1: ~/374/homework05[01;32mpjf5@remotel1[00m:[01;34m~/374/homework05[00m$ cd slices/
]0;pjf5@remotel1: ~/374/homework05/slices[01;32mpjf5@remotel1[00m:[01;34m~/374/homework05/slices[00m$ cayt[K[Ky[Kt [K mandelSlices.cpp
/* Palmer Ford
 * Compute/draw the Mandelbrot set using TSGL and OpenMP
 * Calvin University
 * December 5, 2023
 * for CS374, project 5
 *
 * Joel Adams, for CS 374, Fall 2023, Calvin University.
 */

#include <cstdio>           // C-style I/O
#include <complex>          // complex<T>
#include <cstdlib>          // abs()
#include <tsgl.h>           // CartesianCanvas, etc.
using namespace tsgl;

const int THRESHOLD = 500;  // our Mandelbrot 'escape' threshold

int doMandelbrotCalc(long double x, long double y, int MAX_REPS=THRESHOLD);
void drawMandelbrotPoint(CartesianCanvas& canvas,
		          long double x, long double y, 
			  int reps, int MAX_REPS=THRESHOLD);

int main(int argc, char* argv[]) {
    const int  WINDOW_HEIGHT = 800;
    const int  WINDOW_WIDTH  = 1200;

    printf("\nComputing and drawing the Mandelbrot Set with %s threads using slices...\n", argv[1]);

    const double startTime = omp_get_wtime();

    CartesianCanvas canvas(-1, -1, WINDOW_WIDTH, WINDOW_HEIGHT, 
                           -2, -1.125, 1, 1.125, 
                           "Mandelbrot Set (Calvin U)", GRAY);
    canvas.start();

    unsigned    winHeight = canvas.getWindowHeight()-1,  // TSGL bug ?
	        winWidth  = canvas.getWindowWidth();
    long double startX    = canvas.getMinX(),
		deltaX    = canvas.getPixelWidth(),
		startY    = canvas.getMinY(),
		deltaY    = canvas.getPixelHeight();

    printf("\n");
    if (argc > 1) {
        omp_set_num_threads( atoi(argv[1]) );
    }

    #pragma omp parallel for schedule(static,1)
    for (unsigned row = 0; row < winHeight; ++row) {
       long double y = startY + row * deltaY;	      
       for (unsigned col = 0; col < winWidth; ++col) {  
          long double x = startX + col * deltaX;
          int iterations = doMandelbrotCalc(x, y);
	  drawMandelbrotPoint(canvas, x, y, iterations);
       }
    }

    const double totalTime = omp_get_wtime() - startTime;

    // pause so the program doesn't terminate
    printf("Mandelbrot Set completed.\n"
           "Time elapsed: %f\n"
	       "\nPress ESC or click the window's close-box to quit...\n", totalTime); //TOTALTIME
    canvas.wait();
}


/* perform the Mandelbrot calculation for a given x,y point
 * @param: x, a long double
 * @param: y, a long double
 * @param: MAX_REPS, an int
 * Precondition: MAX_REPS is a value, such that we assume
 *                calculations that iterate more than 
 *                that many times never converge.
 * Postcondition: count == MAX_REPS ||
 *                count == the number of Mandelbrot iterations
 *                          required for (x,y) to converge.
 * @return: count
 */
int doMandelbrotCalc(long double x, long double y, int MAX_REPS) {
    std::complex<long double> originalComplex(x, y);
    std::complex<long double> comp(x, y);
    int count = 0;
    while (std::abs(comp) < 2.0 && count < MAX_REPS) {
        comp = comp * comp + originalComplex;
        ++count;
    }
    return count;
}

/* draw a given (x,y) point, color based on whether or not
 *   (x,y) is within or outside the Mandelbrot set
 * @param: canvas, a TSGL CartesianCanvase
 * @param: x, a long double
 * @param: y, a long double
 * @param: reps, an int
 * @param: MAX_REPS, an int
 * Precondition: reps == doMandelbrotCalcFor(x,y)
 *            && canvas models a slice through the complex plane.
 * Postcondition: the (x,y) pixel on canvas has been shaded [using reps] 
 *                 for inclusion/exclusion in the Mandelbrot set
 *                 depending on how reps relates to MAX_REPS.
 */
void drawMandelbrotPoint(CartesianCanvas& canvas,
		          long double x, long double y, 
			  int reps, int MAX_REPS) {
   CartesianBackground *bg  = canvas.getBackground();

   ColorInt figureColor(238,204,10);              // Gold
   ColorInt surroundColor(137,27,47);             // Maroon
/*
   ColorInt figureColor(0,0,0);                   // Alternative
   ColorInt surroundColor(255,255,0);             //  colors
*/
   if (reps >= MAX_REPS) {
       bg->drawPixel(x, y, figureColor);
   } else {
       bg->drawPixel(x, y, surroundColor);
   }
}

]0;pjf5@remotel1: ~/374/homework05/slices[01;32mpjf5@remotel1[00m:[01;34m~/374/homework05/slices[00m$ make
make: 'mandelSlices' is up to date.
]0;pjf5@remotel1: ~/374/homework05/slices[01;32mpjf5@remotel1[00m:[01;34m~/374/homework05/slices[00m$ ./mandelSlices 4

Computing and drawing the Mandelbrot Set with 4 threads using slices...

Mandelbrot Set completed.
Time elapsed: 4.704973

Press ESC or click the window's close-box to quit...
]0;pjf5@remotel1: ~/374/homework05/slices[01;32mpjf5@remotel1[00m:[01;34m~/374/homework05/slices[00m$ cd ../../=[K[K[K[Kchunks/
]0;pjf5@remotel1: ~/374/homework05/chunks[01;32mpjf5@remotel1[00m:[01;34m~/374/homework05/chunks[00m$ cat mandelChunks,cpp[1Pcpp.cpp
/* Palmer Ford
 * Compute/draw the Mandelbrot set using TSGL and OpenMP
 * Calvin University
 * December 5, 2023
 * for CS374, project 5
 * 
 * Joel Adams, for CS 374, Fall 2023, Calvin University.
 */

#include <cstdio>           // C-style I/O
#include <complex>          // complex<T>
#include <cstdlib>          // abs()
#include <tsgl.h>           // CartesianCanvas, etc.
using namespace tsgl;

const int THRESHOLD = 500;  // our Mandelbrot 'escape' threshold

int doMandelbrotCalc(long double x, long double y, int MAX_REPS=THRESHOLD);
void drawMandelbrotPoint(CartesianCanvas& canvas,
		          long double x, long double y, 
			  int reps, int MAX_REPS=THRESHOLD);

int main(int argc, char* argv[]) {
    const int  WINDOW_HEIGHT = 800;
    const int  WINDOW_WIDTH  = 1200;

    printf("\nComputing and drawing the Mandelbrot Set with %s threads using chunks...\n", argv[1]);

    const double startTime = omp_get_wtime();

    CartesianCanvas canvas(-1, -1, WINDOW_WIDTH, WINDOW_HEIGHT, 
                           -2, -1.125, 1, 1.125, 
                           "Mandelbrot Set (Calvin U)", GRAY);
    canvas.start();

    unsigned    winHeight = canvas.getWindowHeight()-1,  // TSGL bug ?
	        winWidth  = canvas.getWindowWidth();
    long double startX    = canvas.getMinX(),
		deltaX    = canvas.getPixelWidth(),
		startY    = canvas.getMinY(),
		deltaY    = canvas.getPixelHeight();

    printf("\n");
    if (argc > 1) {
        omp_set_num_threads( atoi(argv[1]) );
    }

    #pragma omp parallel for 
    for (unsigned row = 0; row < winHeight; ++row) {
       long double y = startY + row * deltaY;	      
       for (unsigned col = 0; col < winWidth; ++col) {  
          long double x = startX + col * deltaX;
          int iterations = doMandelbrotCalc(x, y);
	  drawMandelbrotPoint(canvas, x, y, iterations);
       }
    }

    const double totalTime = omp_get_wtime() - startTime;

    // pause so the program doesn't terminate
    printf("Mandelbrot Set completed.\n"
           "Time elapsed: %f\n"
	       "\nPress ESC or click the window's close-box to quit...\n", totalTime); //TOTALTIME
    canvas.wait();
}


/* perform the Mandelbrot calculation for a given x,y point
 * @param: x, a long double
 * @param: y, a long double
 * @param: MAX_REPS, an int
 * Precondition: MAX_REPS is a value, such that we assume
 *                calculations that iterate more than 
 *                that many times never converge.
 * Postcondition: count == MAX_REPS ||
 *                count == the number of Mandelbrot iterations
 *                          required for (x,y) to converge.
 * @return: count
 */
int doMandelbrotCalc(long double x, long double y, int MAX_REPS) {
    std::complex<long double> originalComplex(x, y);
    std::complex<long double> comp(x, y);
    int count = 0;
    while (std::abs(comp) < 2.0 && count < MAX_REPS) {
        comp = comp * comp + originalComplex;
        ++count;
    }
    return count;
}

/* draw a given (x,y) point, color based on whether or not
 *   (x,y) is within or outside the Mandelbrot set
 * @param: canvas, a TSGL CartesianCanvase
 * @param: x, a long double
 * @param: y, a long double
 * @param: reps, an int
 * @param: MAX_REPS, an int
 * Precondition: reps == doMandelbrotCalcFor(x,y)
 *            && canvas models a slice through the complex plane.
 * Postcondition: the (x,y) pixel on canvas has been shaded [using reps] 
 *                 for inclusion/exclusion in the Mandelbrot set
 *                 depending on how reps relates to MAX_REPS.
 */
void drawMandelbrotPoint(CartesianCanvas& canvas,
		          long double x, long double y, 
			  int reps, int MAX_REPS) {
   CartesianBackground *bg  = canvas.getBackground();

   ColorInt figureColor(238,204,10);              // Gold
   ColorInt surroundColor(137,27,47);             // Maroon
/*
   ColorInt figureColor(0,0,0);                   // Alternative
   ColorInt surroundColor(255,255,0);             //  colors
*/
   if (reps >= MAX_REPS) {
       bg->drawPixel(x, y, figureColor);
   } else {
       bg->drawPixel(x, y, surroundColor);
   }
}

]0;pjf5@remotel1: ~/374/homework05/chunks[01;32mpjf5@remotel1[00m:[01;34m~/374/homework05/chunks[00m$ make
make: 'mandelChunks' is up to date.
]0;pjf5@remotel1: ~/374/homework05/chunks[01;32mpjf5@remotel1[00m:[01;34m~/374/homework05/chunks[00m$ ./mandelChunks 4

Computing and drawing the Mandelbrot Set with 4 threads using chunks...

Mandelbrot Set completed.
Time elapsed: 5.795680

Press ESC or click the window's close-box to quit...
]0;pjf5@remotel1: ~/374/homework05/chunks[01;32mpjf5@remotel1[00m:[01;34m~/374/homework05/chunks[00m$ exit

Script done on 2023-12-05 00:20:31-05:00 [COMMAND_EXIT_CODE="0"]
