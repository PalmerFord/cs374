Script started on 2023-11-16 21:44:59-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="197" LINES="16"]
]0;pjf5@remotel1: ~/374/homework03/firestarter[01;32mpjf5@remotel1[00m:[01;34m~/374/homework03/firestarter[00m$ cat[K[K[Kmake
mpicc -c -I/usr/X11R6/include -Wall firestarter.c
mpicc firestarter.o X-graph.o display.o -o Fire -L/usr/X11R6/lib -lX11 -lm 
]0;pjf5@remotel1: ~/374/homework03/firestarter[01;32mpjf5@remotel1[00m:[01;34m~/374/homework03/firestarter[00m$ cat firestarter.c
/* Palmer Ford
 * Parallelization of the original firestarter where number of trial is parallelized to reduce completion time.
 * Calvin University
 * November 13, 2023
 * for CS374, project 2
 *
 * firestarter.c 
 * David Joiner
 * Usage: Fire [forestSize(20)] [numTrials(5000)] * [numProbabilities(101)] [showGraph(1)]
 */
#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include "X-graph.h"

#define UNBURNT 0
#define SMOLDERING 1
#define BURNING 2
#define BURNT 3

#define true 1
#define false 0

typedef int boolean;

extern void seed_by_time(int);
extern int ** allocate_forest(int);
extern void initialize_forest(int, int **);
extern double get_percent_burned(int, int **);
extern void delete_forest(int, int **);
extern void light_tree(int, int **,int,int);
extern boolean forest_is_burning(int, int **);
extern void forest_burns(int, int **,double);
extern int burn_until_out(int,int **,double,int,int);
extern void print_forest(int, int **);

int main(int argc, char ** argv) {
    // initial conditions and variable definitions
    int forest_size=20;
    double * prob_spread;
    double prob_min=0.0;
    double prob_max=1.0;
    double prob_step;
    int **forest;
    double * count;

    double * count_local;          // For MPI_Reduce
    double * percent_burned_local; // For MPI_Reduce

    double * percent_burned;
    int i_trial;
    int n_trials=5000;
    int i_prob;
    int n_probs=101;
    int do_display=0;
    Bool initialized = false;
    xgraph thegraph;
    
    int id = -1;
    int numProcesses = -1;
    double startTime = 0.0, totalTime = 0.0;

    // check command line arguments
    if (argc > 1) {
        sscanf(argv[1],"%d",&forest_size);
    }
    if (argc > 2) {
        sscanf(argv[2],"%d",&n_trials);
    }
    if (argc > 3) {
        sscanf(argv[3],"%d",&n_probs);
    }
    if (argc > 4) {
        sscanf(argv[4],"%d",&do_display);
    }
    if (do_display!=0) do_display=1;

    // setup problem
    seed_by_time(0);
    forest=allocate_forest(forest_size);
    prob_spread = (double *) malloc (n_probs*sizeof(double));
    percent_burned = (double *) malloc (n_probs*sizeof(double));
    count = (double *) malloc (n_probs*sizeof(double));

    // for a number of probabilities, calculate
    // average burn and output
    prob_step = (prob_max-prob_min)/(double)(n_probs-1);

    // MPI initialization
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &id);
	MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);

    // Dynamic allocation for local variables
    percent_burned_local = (double *) malloc (n_probs*sizeof(double));
    count_local = (double *) malloc (n_probs*sizeof(double));

    startTime = MPI_Wtime();

    // Slicing parallelization for trials
    for (i_trial = id; i_trial < n_trials; i_trial += numProcesses) {
        for (i_prob = 0 ; i_prob < n_probs; i_prob++) {
            //for a number of trials, calculate average
            //percent burn
            if (!initialized) {
                percent_burned_local[i_prob]=0.0;
                prob_spread[i_prob] = prob_min + (double)i_prob * prob_step;
            }
            // Burn until the fire is out
            count_local[i_prob] += burn_until_out(forest_size,forest,prob_spread[i_prob],
                forest_size/2,forest_size/2);
            percent_burned_local[i_prob] += get_percent_burned(forest_size,forest);
        }
        initialized = true;
    }

    MPI_Reduce(percent_burned_local, percent_burned, n_probs, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    MPI_Reduce(count_local, count, n_probs, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    totalTime = MPI_Wtime() - startTime;

    if (id == 0) {
        printf("Forest size of %dx%d\nProbability of fire spreading  ,  Average percent burned  ,  Number of Iterations\n", forest_size, forest_size);

        // Print arrays of percent burned and iteration counts
        int i; // declare i here
        for (i = 0; i < n_probs; i++) {
            percent_burned[i] /= n_trials;
            count[i] /= n_trials;
            printf("%lf  ,  %lf  ,  %lf \n",prob_spread[i],
                percent_burned[i], count[i]);
        }

        printf("Total time: %f\n", totalTime);
        
        // plot graph
        if (do_display==1) {
            xgraphSetup(&thegraph,300,300);
            xgraphDraw(&thegraph,n_probs,0,0,1,1,prob_spread,percent_burned);
            pause();
        }
    }

    // clean up
    MPI_Finalize();
    delete_forest(forest_size,forest);
    free(prob_spread);
    free(percent_burned);
    free(percent_burned_local);
    free(count);
    free(count_local);
    return 0;
}

#include <time.h>

void seed_by_time(int offset) {
    time_t the_time;
    time(&the_time);
    srand((int)the_time+offset);
}

int burn_until_out(int forest_size,int ** forest, double prob_spread,
    int start_i, int start_j) {
    int count;

    initialize_forest(forest_size,forest);
    light_tree(forest_size,forest,start_i,start_j);

    // burn until fire is gone
    count = 0;
    while(forest_is_burning(forest_size,forest)) {
        forest_burns(forest_size,forest,prob_spread);
        count++;
    }

    return count;
}

double get_percent_burned(int forest_size,int ** forest) {
    int i,j;
    int total = forest_size*forest_size-1;
    int sum=0;

    // calculate pecrent burned
    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                sum++;
            }
        }
    }

    // return percent burned;
    return ((double)(sum-1)/(double)total);
}


int ** allocate_forest(int forest_size) {
    int i;
    int ** forest;

    forest = (int **) malloc (sizeof(int*)*forest_size);
    for (i=0;i<forest_size;i++) {
        forest[i] = (int *) malloc (sizeof(int)*forest_size);
    }

    return forest;
}

void initialize_forest(int forest_size, int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            forest[i][j]=UNBURNT;
        }
    }
}

void delete_forest(int forest_size, int ** forest) {
    int i;

    for (i=0;i<forest_size;i++) {
        free(forest[i]);
    }
    free(forest);
}

void light_tree(int forest_size, int ** forest, int i, int j) {
    forest[i][j]=SMOLDERING;
}

boolean fire_spreads(double prob_spread) {
    if ((double)rand()/(double)RAND_MAX < prob_spread) 
        return true;
    else
        return false;
}

void forest_burns(int forest_size, int **forest,double prob_spread) {
    int i,j;
    extern boolean fire_spreads(double);

    //burning trees burn down, smoldering trees ignite
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) forest[i][j]=BURNT;
            if (forest[i][j]==SMOLDERING) forest[i][j]=BURNING;
        }
    }

    //unburnt trees catch fire
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) {
                if (i!=0) { // North
                    if (fire_spreads(prob_spread)&&forest[i-1][j]==UNBURNT) {
                        forest[i-1][j]=SMOLDERING;
                    }
                }
                if (i!=forest_size-1) { //South
                    if (fire_spreads(prob_spread)&&forest[i+1][j]==UNBURNT) {
                        forest[i+1][j]=SMOLDERING;
                    }
                }
                if (j!=0) { // West
                    if (fire_spreads(prob_spread)&&forest[i][j-1]==UNBURNT) {
                        forest[i][j-1]=SMOLDERING;
                    }
                }
                if (j!=forest_size-1) { // East
                    if (fire_spreads(prob_spread)&&forest[i][j+1]==UNBURNT) {
                        forest[i][j+1]=SMOLDERING;
                    }
                }
            }
        }
    }
}

boolean forest_is_burning(int forest_size, int ** forest) {
    int i,j;

    for (i=0; i<forest_size; i++) {
        for (j=0; j<forest_size; j++) {
            if (forest[i][j]==SMOLDERING||forest[i][j]==BURNING) {
                return true;
            }
        }
    }
    return false;
}

void print_forest(int forest_size,int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                printf(".");
            } else {
                printf("X");
            }
        }
        printf("\n");
    }
}
]0;pjf5@remotel1: ~/374/homework03/firestarter[01;32mpjf5@remotel1[00m:[01;34m~/374/homework03/firestarter[00m$ cat ../s[KSLURM/slurm-221570.out 
Forest size of 20x20
Probability of fire spreading  ,  Average percent burned  ,  Number of Iterations
0.000000  ,  0.000000  ,  2.000000 
0.010000  ,  0.000128  ,  2.051200 
0.020000  ,  0.000128  ,  2.051200 
0.030000  ,  0.000385  ,  2.153600 
0.040000  ,  0.000385  ,  2.102400 
0.050000  ,  0.000770  ,  2.307200 
0.060000  ,  0.000385  ,  2.153600 
0.070000  ,  0.000770  ,  2.307200 
0.080000  ,  0.001283  ,  2.460800 
0.090000  ,  0.001291  ,  2.412800 
0.100000  ,  0.000898  ,  2.358400 
0.110000  ,  0.002310  ,  2.665600 
0.120000  ,  0.002378  ,  2.795200 
0.130000  ,  0.002121  ,  2.590400 
0.140000  ,  0.000642  ,  2.204800 
0.150000  ,  0.002582  ,  2.822400 
0.160000  ,  0.003080  ,  2.972800 
0.170000  ,  0.003661  ,  3.102400 
0.180000  ,  0.004824  ,  3.385600 
0.190000  ,  0.006629  ,  3.979200 
0.200000  ,  0.003986  ,  3.102400 
0.210000  ,  0.003721  ,  3.228800 
0.220000  ,  0.003533  ,  2.948800 
0.230000  ,  0.005903  ,  3.433600 
0.240000  ,  0.004106  ,  3.177600 
0.250000  ,  0.010214  ,  4.665600 
0.260000  ,  0.010049  ,  4.723200 
0.270000  ,  0.010651  ,  4.560000 
0.280000  ,  0.012062  ,  4.355200 
0.290000  ,  0.007956  ,  3.996800 
0.300000  ,  0.014949  ,  5.750400 
0.310000  ,  0.020916  ,  6.249600 
0.320000  ,  0.012198  ,  5.075200 
0.330000  ,  0.021638  ,  6.057600 
0.340000  ,  0.040112  ,  8.880000 
0.350000  ,  0.037193  ,  8.502400 
0.360000  ,  0.037999  ,  8.556800 
0.370000  ,  0.053426  ,  9.160000 
0.380000  ,  0.049772  ,  9.190400 
0.390000  ,  0.047350  ,  9.424000 
0.400000  ,  0.066061  ,  10.464000 
0.410000  ,  0.113504  ,  13.342400 
0.420000  ,  0.155056  ,  17.548800 
0.430000  ,  0.129003  ,  14.419200 
0.440000  ,  0.172166  ,  21.089600 
0.450000  ,  0.139020  ,  15.712000 
0.460000  ,  0.181257  ,  19.332800 
0.470000  ,  0.174685  ,  19.390400 
0.480000  ,  0.228519  ,  15.435200 
0.490000  ,  0.331132  ,  26.688000 
0.500000  ,  0.424168  ,  31.467200 
0.510000  ,  0.428463  ,  28.060800 
0.520000  ,  0.474342  ,  28.190400 
0.530000  ,  0.596319  ,  35.171200 
0.540000  ,  0.646111  ,  35.563200 
0.550000  ,  0.624088  ,  28.849600 
0.560000  ,  0.659268  ,  28.654400 
0.570000  ,  0.704762  ,  28.808000 
0.580000  ,  0.801628  ,  31.644800 
0.590000  ,  0.724499  ,  28.214400 
0.600000  ,  0.821041  ,  29.560000 
0.610000  ,  0.817079  ,  26.193600 
0.620000  ,  0.827433  ,  26.211200 
0.630000  ,  0.927314  ,  29.064000 
0.640000  ,  0.945921  ,  30.120000 
0.650000  ,  0.955128  ,  26.352000 
0.660000  ,  0.953416  ,  26.054400 
0.670000  ,  0.956988  ,  25.584000 
0.680000  ,  0.919836  ,  24.590400 
0.690000  ,  0.921881  ,  22.768000 
0.700000  ,  0.976826  ,  23.484800 
0.710000  ,  0.977315  ,  23.972800 
0.720000  ,  0.978727  ,  24.211200 
0.730000  ,  0.982552  ,  24.283200 
0.740000  ,  0.936209  ,  22.512000 
0.750000  ,  0.990268  ,  23.204800 
0.760000  ,  0.987793  ,  22.952000 
0.770000  ,  0.941726  ,  22.232000 
0.780000  ,  0.993644  ,  22.873600 
0.790000  ,  0.993440  ,  22.382400 
0.800000  ,  0.995296  ,  22.307200 
0.810000  ,  0.997109  ,  22.153600 
0.820000  ,  0.995441  ,  22.204800 
0.830000  ,  0.997562  ,  22.283200 
0.840000  ,  0.998204  ,  22.129600 
0.850000  ,  0.998204  ,  22.102400 
0.860000  ,  0.998845  ,  22.256000 
0.870000  ,  0.998973  ,  22.051200 
0.880000  ,  0.999743  ,  22.102400 
0.890000  ,  0.999230  ,  22.051200 
0.900000  ,  0.999102  ,  22.000000 
0.910000  ,  0.999615  ,  21.948800 
0.920000  ,  0.999872  ,  22.000000 
0.930000  ,  0.999743  ,  22.000000 
0.940000  ,  1.000000  ,  22.102400 
0.950000  ,  1.000000  ,  22.000000 
0.960000  ,  1.000000  ,  22.000000 
0.970000  ,  1.000000  ,  22.000000 
0.980000  ,  1.000000  ,  22.051200 
0.990000  ,  1.000000  ,  22.000000 
1.000000  ,  1.000000  ,  22.000000 
Total time: 0.158305
]0;pjf5@remotel1: ~/374/homework03/firestarter[01;32mpjf5@remotel1[00m:[01;34m~/374/homework03/firestarter[00m$ exit

Script done on 2023-11-16 21:45:37-05:00 [COMMAND_EXIT_CODE="0"]
